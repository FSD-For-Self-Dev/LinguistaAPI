# Generated by Django 4.2.8 on 2023-12-06 17:47

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import languages.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('languages', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Antonym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name': 'Антоним',
                'verbose_name_plural': 'Антонимы',
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Date modified')),
                ('title', models.CharField(max_length=32, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator(message='Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.', regex="^([A-Za-zА-Яа-я]+)([A-Za-zА-Яа-я-!?.,:' ]*)$")], verbose_name='Название коллекции')),
                ('slug', models.SlugField(null=True, unique=True, verbose_name='Слаг')),
                ('description', models.TextField(blank=True, max_length=512, verbose_name='Описание')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name': 'Коллекция',
                'verbose_name_plural': 'Коллекции',
                'ordering': ['-created'],
                'get_latest_by': ['created', 'modified'],
            },
        ),
        migrations.CreateModel(
            name='Definition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Date modified')),
                ('text', models.CharField(help_text='Определение слова или фразы', max_length=1024, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.RegexValidator(message='Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.', regex="^([A-Za-zА-Яа-я]+)([A-Za-zА-Яа-я-!?.,:' ]*)$")], verbose_name='Определение')),
                ('translation', models.CharField(blank=True, max_length=1024, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.RegexValidator(message='Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.', regex="^([A-Za-zА-Яа-я]+)([A-Za-zА-Яа-я-!?.,:' ]*)$")], verbose_name='Перевод определения')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name': 'Определение',
                'verbose_name_plural': 'Определения',
                'ordering': ['-created'],
                'get_latest_by': ['created', 'modified'],
            },
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name': 'Форма',
                'verbose_name_plural': 'Формы',
            },
        ),
        migrations.CreateModel(
            name='FormsGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Date modified')),
                ('name', models.CharField(max_length=64, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator(message='Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.', regex="^([A-Za-zА-Яа-я]+)([A-Za-zА-Яа-я-!?.,:' ]*)$")], verbose_name='Group name')),
                ('slug', models.SlugField(null=True, unique=True, verbose_name='Слаг')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name': 'Forms group',
                'verbose_name_plural': 'Группы форм',
                'ordering': ('-created', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Similar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name': 'Похожее',
                'verbose_name_plural': 'Похожие',
            },
        ),
        migrations.CreateModel(
            name='Synonym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Date modified')),
                ('difference', models.CharField(blank=True, help_text='Разница между %(class)ss', max_length=512, verbose_name='Разница в использовании')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name': 'Синонимы',
                'verbose_name_plural': 'Синонимы',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator(message='Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.', regex="^([A-Za-zА-Яа-я]+)([A-Za-zА-Яа-я-!?.,:' ]*)$")], verbose_name='Имя тега')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator(message='Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.', regex="^([A-Za-zА-Яа-я]+)([A-Za-zА-Яа-я-!?.,:' ]*)$")], verbose_name='Имя типа')),
                ('name_ru', models.CharField(max_length=64, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator(message='Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.', regex="^([A-Za-zА-Яа-я]+)([A-Za-zА-Яа-я-!?.,:' ]*)$")], verbose_name='Имя типа')),
                ('name_en', models.CharField(max_length=64, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator(message='Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.', regex="^([A-Za-zА-Яа-я]+)([A-Za-zА-Яа-я-!?.,:' ]*)$")], verbose_name='Имя типа')),
                ('slug', models.SlugField(max_length=64, unique=True, verbose_name='Слаг')),
                ('sorting', models.PositiveIntegerField(default=0, help_text='увеличьте, чтобы поднять в списке', verbose_name='Порядок сортировки')),
            ],
            options={
                'verbose_name': 'Тип',
                'verbose_name_plural': 'Типы',
            },
        ),
        migrations.CreateModel(
            name='UsageExample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Date modified')),
                ('text', models.CharField(help_text='Пример использования слова или фразы', max_length=1024, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.RegexValidator(message='Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.', regex="^([A-Za-zА-Яа-я]+)([A-Za-zА-Яа-я-!?.,:' ]*)$")], verbose_name='Пример использования')),
                ('translation', models.CharField(blank=True, max_length=1024, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.RegexValidator(message='Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.', regex="^([A-Za-zА-Яа-я]+)([A-Za-zА-Яа-я-!?.,:' ]*)$")], verbose_name='Перевод примера')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name': 'Пример использования',
                'verbose_name_plural': 'Примеры использования',
                'ordering': ['-created'],
                'get_latest_by': ['created', 'modified'],
            },
        ),
        migrations.CreateModel(
            name='Word',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Date modified')),
                ('text', models.CharField(max_length=512, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator(message='Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.', regex="^([A-Za-zА-Яа-я]+)([A-Za-zА-Яа-я-!?.,:' ]*)$")], verbose_name='Слово или фраза')),
                ('slug', models.SlugField(max_length=4096, unique=True, verbose_name='Слаг')),
                ('activity', models.CharField(choices=[('I', 'Неактивное'), ('A', 'Активное'), ('M', 'Усвоенное')], default='I', max_length=8, verbose_name='Статус активности')),
                ('is_problematic', models.BooleanField(default=False, verbose_name='Проблемно ли для вас это слово')),
                ('antonyms', models.ManyToManyField(blank=True, help_text='Слова с обратным значением', through='vocabulary.Antonym', to='vocabulary.word', verbose_name='Антонимы')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vocabulary', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Слово или фраза',
                'verbose_name_plural': 'Слова и фразы',
                'ordering': ['-created'],
                'get_latest_by': ['created', 'modified'],
            },
        ),
        migrations.CreateModel(
            name='WordTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Date modified')),
                ('text', models.CharField(help_text='Перевод слова или фразы на другой язык', max_length=512, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator(message='Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.', regex="^([A-Za-zА-Яа-я]+)([A-Za-zА-Яа-я-!?.,:' ]*)$")], verbose_name='Перевод')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('language', models.ForeignKey(default=languages.models.Language.get_default_pk, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='words_translations', to='languages.language', verbose_name='Язык')),
            ],
            options={
                'verbose_name': 'Перевод',
                'verbose_name_plural': 'Переводы',
                'ordering': ['-created'],
                'get_latest_by': ['created', 'modified'],
            },
        ),
        migrations.CreateModel(
            name='WordUsageExamples',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('example', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='vocabulary.usageexample', verbose_name='Пример использования')),
                ('word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='vocabulary.word', verbose_name='Слово')),
            ],
            options={
                'verbose_name': 'Пример использования слова',
                'verbose_name_plural': 'Примеры использования слов',
                'ordering': ['-created'],
                'get_latest_by': ['created'],
            },
        ),
        migrations.CreateModel(
            name='WordTranslations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('translation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='vocabulary.wordtranslation', verbose_name='Перевод')),
                ('word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='vocabulary.word', verbose_name='Слово')),
            ],
            options={
                'verbose_name': 'Перевод слова',
                'verbose_name_plural': 'Переводы слов',
                'ordering': ['-created'],
                'get_latest_by': ['created'],
            },
        ),
        migrations.CreateModel(
            name='WordsInCollections',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='vocabulary.collection', verbose_name='Коллекция')),
                ('word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='vocabulary.word', verbose_name='Слово')),
            ],
            options={
                'verbose_name': 'Слова, добавленные в коллекцию',
                'verbose_name_plural': 'Слова, добавленные в коллекцию',
                'ordering': ['-created'],
                'get_latest_by': ['created'],
            },
        ),
        migrations.CreateModel(
            name='WordsFormGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('forms_group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s', to='vocabulary.formsgroup', verbose_name='Forms group')),
                ('word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='vocabulary.word', verbose_name='Слово')),
            ],
            options={
                'verbose_name': 'Words forms group',
                'verbose_name_plural': 'Words forms group',
                'ordering': ['-created'],
                'get_latest_by': ['created'],
            },
        ),
        migrations.CreateModel(
            name='WordDefinitions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='vocabulary.definition', verbose_name='Определение')),
                ('word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='vocabulary.word', verbose_name='Слово')),
            ],
            options={
                'verbose_name': 'Определение слова',
                'verbose_name_plural': 'Определения слов',
                'ordering': ['-created'],
                'get_latest_by': ['created'],
            },
        ),
        migrations.AddField(
            model_name='word',
            name='definitions',
            field=models.ManyToManyField(blank=True, related_name='definition_for', through='vocabulary.WordDefinitions', to='vocabulary.definition', verbose_name='Определения'),
        ),
        migrations.AddField(
            model_name='word',
            name='examples',
            field=models.ManyToManyField(blank=True, related_name='usage_example_for', through='vocabulary.WordUsageExamples', to='vocabulary.usageexample', verbose_name='Пример использования'),
        ),
        migrations.AddField(
            model_name='word',
            name='forms',
            field=models.ManyToManyField(blank=True, help_text='Формы слов', through='vocabulary.Form', to='vocabulary.word', verbose_name='Формы'),
        ),
        migrations.AddField(
            model_name='word',
            name='language',
            field=models.ForeignKey(default=languages.models.Language.get_default_pk, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='words', to='languages.language', verbose_name='Язык'),
        ),
        migrations.AddField(
            model_name='word',
            name='similars',
            field=models.ManyToManyField(blank=True, help_text='Слова с похожим произношением или написанием', through='vocabulary.Similar', to='vocabulary.word', verbose_name='Похожие'),
        ),
        migrations.AddField(
            model_name='word',
            name='synonyms',
            field=models.ManyToManyField(blank=True, help_text='Слова с похожим значением', through='vocabulary.Synonym', to='vocabulary.word', verbose_name='Синонимы'),
        ),
        migrations.AddField(
            model_name='word',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='words', to='vocabulary.tag', verbose_name='Теги слов'),
        ),
        migrations.AddField(
            model_name='word',
            name='translations',
            field=models.ManyToManyField(blank=True, related_name='translation_for', through='vocabulary.WordTranslations', to='vocabulary.wordtranslation', verbose_name='Переводы'),
        ),
        migrations.AddField(
            model_name='word',
            name='types',
            field=models.ManyToManyField(blank=True, related_name='words', to='vocabulary.type', verbose_name='Тип'),
        ),
        migrations.AddField(
            model_name='synonym',
            name='from_word',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_from_words', to='vocabulary.word'),
        ),
        migrations.AddField(
            model_name='synonym',
            name='to_word',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_to_words', to='vocabulary.word'),
        ),
        migrations.AddField(
            model_name='similar',
            name='from_word',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_from_words', to='vocabulary.word'),
        ),
        migrations.AddField(
            model_name='similar',
            name='to_word',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_to_words', to='vocabulary.word'),
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Date modified')),
                ('text', models.CharField(max_length=4096, verbose_name='Текст заметки')),
                ('word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='vocabulary.word', verbose_name='Слово')),
            ],
            options={
                'verbose_name': 'Заметка',
                'verbose_name_plural': 'Заметки',
                'ordering': ['-created'],
                'get_latest_by': ['created'],
            },
        ),
        migrations.CreateModel(
            name='ImageAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Date modified')),
                ('image', models.ImageField(blank=True, help_text='Ассоциация-картинка', null=True, upload_to='words/associations/images', verbose_name='Картинка')),
                ('name', models.CharField(blank=True, max_length=64, validators=[django.core.validators.RegexValidator(message='Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.', regex="^([A-Za-zА-Яа-я]+)([A-Za-zА-Яа-я-!?.,:' ]*)$")], verbose_name='Название для картинки')),
                ('word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='vocabulary.word', verbose_name='Слово')),
            ],
            options={
                'verbose_name': 'Ассоциация-картинка',
                'verbose_name_plural': 'Ассоциации-картинки',
            },
        ),
        migrations.AddField(
            model_name='formsgroup',
            name='words',
            field=models.ManyToManyField(blank=True, related_name='forms_groups', through='vocabulary.WordsFormGroups', to='vocabulary.word', verbose_name='Words in forms group'),
        ),
        migrations.AddField(
            model_name='form',
            name='from_word',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_from_words', to='vocabulary.word'),
        ),
        migrations.AddField(
            model_name='form',
            name='to_word',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_to_words', to='vocabulary.word'),
        ),
        migrations.CreateModel(
            name='FavoriteWord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_for', to='vocabulary.word', verbose_name='Слово')),
            ],
            options={
                'verbose_name': 'Избранное слова',
                'verbose_name_plural': 'Избранные слова',
                'ordering': ['-created'],
                'get_latest_by': ['created'],
            },
        ),
        migrations.CreateModel(
            name='FavoriteCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_for', to='vocabulary.collection', verbose_name='Коллекция')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Избранная коллекция',
                'verbose_name_plural': 'Избранные коллекции',
                'ordering': ['-created'],
                'get_latest_by': ['created'],
            },
        ),
        migrations.AddField(
            model_name='collection',
            name='words',
            field=models.ManyToManyField(blank=True, related_name='collections', through='vocabulary.WordsInCollections', to='vocabulary.word', verbose_name='Слово, добавленное в коллекцию'),
        ),
        migrations.AddField(
            model_name='antonym',
            name='from_word',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_from_words', to='vocabulary.word'),
        ),
        migrations.AddField(
            model_name='antonym',
            name='to_word',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_to_words', to='vocabulary.word'),
        ),
        migrations.AddConstraint(
            model_name='wordusageexamples',
            constraint=models.UniqueConstraint(fields=('word', 'example'), name='unique_word_example'),
        ),
        migrations.AddConstraint(
            model_name='wordtranslations',
            constraint=models.UniqueConstraint(fields=('word', 'translation'), name='unique_word_translation'),
        ),
        migrations.AddConstraint(
            model_name='wordtranslation',
            constraint=models.UniqueConstraint(fields=('text', 'author'), name='unique_word_translation_in_user_voc'),
        ),
        migrations.AddConstraint(
            model_name='wordsincollections',
            constraint=models.UniqueConstraint(fields=('word', 'collection'), name='unique_word_in_collection'),
        ),
        migrations.AddConstraint(
            model_name='wordsformgroups',
            constraint=models.UniqueConstraint(fields=('word', 'forms_group'), name='unique_word_forms_group'),
        ),
        migrations.AddConstraint(
            model_name='worddefinitions',
            constraint=models.UniqueConstraint(fields=('word', 'definition'), name='unique_word_definition'),
        ),
        migrations.AddConstraint(
            model_name='word',
            constraint=models.UniqueConstraint(fields=('text', 'author'), name='unique_words_in_user_voc'),
        ),
        migrations.AddConstraint(
            model_name='usageexample',
            constraint=models.UniqueConstraint(fields=('text', 'author'), name='unique_word_usage_example_in_user_voc'),
        ),
        migrations.AddConstraint(
            model_name='synonym',
            constraint=models.UniqueConstraint(fields=('from_word', 'to_word'), name='unique_synonym_pair'),
        ),
        migrations.AddConstraint(
            model_name='similar',
            constraint=models.UniqueConstraint(fields=('from_word', 'to_word'), name='unique_similars'),
        ),
        migrations.AddConstraint(
            model_name='formsgroup',
            constraint=models.UniqueConstraint(fields=('name', 'author'), name='unique_group_name'),
        ),
        migrations.AddConstraint(
            model_name='form',
            constraint=models.UniqueConstraint(fields=('from_word', 'to_word'), name='unique_forms'),
        ),
        migrations.AddConstraint(
            model_name='definition',
            constraint=models.UniqueConstraint(fields=('text', 'author'), name='unique_definition_in_user_voc'),
        ),
        migrations.AddConstraint(
            model_name='collection',
            constraint=models.UniqueConstraint(fields=('title', 'author'), name='unique_user_collection'),
        ),
        migrations.AddConstraint(
            model_name='antonym',
            constraint=models.UniqueConstraint(fields=('from_word', 'to_word'), name='unique_antonym_pair'),
        ),
    ]
