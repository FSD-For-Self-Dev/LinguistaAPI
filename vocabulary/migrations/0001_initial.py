# Generated by Django 4.2.11 on 2024-05-25 14:08

import core.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import uuid
import vocabulary.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("languages", "0002_alter_language_isocode"),
    ]

    operations = [
        migrations.CreateModel(
            name="Antonym",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "note",
                    models.CharField(
                        blank=True,
                        help_text="Note for %(class)ss",
                        max_length=512,
                        verbose_name="Заметка",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
            ],
            options={
                "verbose_name": "Антоним",
                "verbose_name_plural": "Антонимы",
                "ordering": ("-from_word__created", "-created"),
                "get_latest_by": ("created",),
            },
            bases=(core.models.GetObjectModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Collection",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Date modified"
                    ),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="Slug")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        max_length=32,
                        validators=[
                            django.core.validators.MinLengthValidator(1),
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            ),
                        ],
                        verbose_name="Название коллекции",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=128, verbose_name="Описание"
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор",
                    ),
                ),
            ],
            options={
                "verbose_name": "Коллекция",
                "verbose_name_plural": "Коллекции",
                "ordering": ("-created", "-modified", "-id"),
                "get_latest_by": ("created", "modified"),
            },
            bases=(
                core.models.GetObjectBySlugModelMixin,
                vocabulary.models.WordsCountMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Definition",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Date modified"
                    ),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="Slug")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        help_text="Определение слова или фразы",
                        max_length=1024,
                        validators=[
                            django.core.validators.MinLengthValidator(2),
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            ),
                        ],
                        verbose_name="Определение",
                    ),
                ),
                (
                    "translation",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        validators=[
                            django.core.validators.MinLengthValidator(2),
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            ),
                        ],
                        verbose_name="Перевод определения",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор",
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="definitions",
                        to="languages.language",
                        verbose_name="Язык",
                    ),
                ),
            ],
            options={
                "verbose_name": "Определение",
                "verbose_name_plural": "Определения",
                "ordering": ("-created", "-modified", "-id"),
                "get_latest_by": ("created", "modified"),
            },
            bases=(
                core.models.GetObjectBySlugModelMixin,
                vocabulary.models.WordsCountMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Form",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
            ],
            options={
                "verbose_name": "Форма",
                "verbose_name_plural": "Формы",
                "ordering": ("-from_word__created", "-created"),
                "get_latest_by": ("created",),
            },
            bases=(core.models.GetObjectModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="FormsGroup",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Date modified"
                    ),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="Slug")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=64,
                        validators=[
                            django.core.validators.MinLengthValidator(1),
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            ),
                        ],
                        verbose_name="Group name",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        max_length=7,
                        validators=[
                            django.core.validators.MinLengthValidator(7),
                            django.core.validators.RegexValidator(
                                message="Color must be in hex format.",
                                regex="^#[\\w]+$",
                            ),
                        ],
                        verbose_name="Group color",
                    ),
                ),
                (
                    "translation",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        validators=[
                            django.core.validators.MinLengthValidator(1),
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            ),
                        ],
                        verbose_name="Group name translation",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор",
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="forms_groups",
                        to="languages.language",
                        verbose_name="Язык",
                    ),
                ),
            ],
            options={
                "verbose_name": "Forms group",
                "verbose_name_plural": "Группы форм",
                "ordering": ("-created", "-modified", "name"),
                "get_latest_by": ("created", "modified"),
            },
            bases=(
                core.models.GetObjectBySlugModelMixin,
                vocabulary.models.WordsCountMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ImageAssociation",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Date modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        upload_to="vocabulary/associations/images",
                        verbose_name="Картинка",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            )
                        ],
                        verbose_name="Название для картинки",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ассоциация-картинка",
                "verbose_name_plural": "Ассоциации-картинки",
                "ordering": ("-created", "-modified"),
                "get_latest_by": ("created", "modified"),
            },
            bases=(
                core.models.GetObjectModelMixin,
                vocabulary.models.WordsCountMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="QuoteAssociation",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Date modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        max_length=256,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            )
                        ],
                        verbose_name="Quote text",
                    ),
                ),
                (
                    "quote_author",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            )
                        ],
                        verbose_name="Quote author",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор",
                    ),
                ),
            ],
            options={
                "verbose_name": "Association quote",
                "verbose_name_plural": "Association quotes",
                "ordering": ("-created", "-modified"),
                "get_latest_by": ("created", "modified"),
            },
            bases=(
                core.models.GetObjectModelMixin,
                vocabulary.models.WordsCountMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Similar",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
            ],
            options={
                "verbose_name": "Похожее",
                "verbose_name_plural": "Похожие",
                "ordering": ("-from_word__created", "-created"),
                "get_latest_by": ("created",),
            },
            bases=(core.models.GetObjectModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Synonym",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "note",
                    models.CharField(
                        blank=True,
                        help_text="Note for %(class)ss",
                        max_length=512,
                        verbose_name="Заметка",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
            ],
            options={
                "verbose_name": "Синонимы",
                "verbose_name_plural": "Синонимы",
                "ordering": ("-from_word__created", "-created"),
                "get_latest_by": ("created",),
            },
            bases=(core.models.GetObjectModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Date modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=32,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(1),
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            ),
                        ],
                        verbose_name="Имя тега",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор",
                    ),
                ),
            ],
            options={
                "verbose_name": "Тег",
                "verbose_name_plural": "Теги",
                "ordering": ("-created", "-modified"),
                "get_latest_by": ("created", "modified"),
            },
            bases=(
                core.models.GetObjectModelMixin,
                vocabulary.models.WordsCountMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Type",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Date modified"
                    ),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="Slug")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=64,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(1),
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            ),
                        ],
                        verbose_name="Имя типа",
                    ),
                ),
                (
                    "name_ru",
                    models.CharField(
                        max_length=64,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(1),
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            ),
                        ],
                        verbose_name="Имя типа",
                    ),
                ),
                (
                    "name_en",
                    models.CharField(
                        max_length=64,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(1),
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            ),
                        ],
                        verbose_name="Имя типа",
                    ),
                ),
            ],
            options={
                "verbose_name": "Тип",
                "verbose_name_plural": "Типы",
                "ordering": ("-created", "-modified", "-id"),
                "get_latest_by": ("created", "modified"),
            },
            bases=(
                core.models.GetObjectBySlugModelMixin,
                vocabulary.models.WordsCountMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="UsageExample",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Date modified"
                    ),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="Slug")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        help_text="Пример использования слова или фразы",
                        max_length=1024,
                        validators=[
                            django.core.validators.MinLengthValidator(2),
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            ),
                        ],
                        verbose_name="Пример использования",
                    ),
                ),
                (
                    "translation",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        validators=[
                            django.core.validators.MinLengthValidator(2),
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            ),
                        ],
                        verbose_name="Перевод примера",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор",
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="examples",
                        to="languages.language",
                        verbose_name="Язык",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пример использования",
                "verbose_name_plural": "Примеры использования",
                "ordering": ("-created", "-modified"),
                "get_latest_by": ("created", "modified"),
            },
            bases=(
                core.models.GetObjectBySlugModelMixin,
                vocabulary.models.WordsCountMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Word",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Date modified"
                    ),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="Slug")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        max_length=512,
                        validators=[
                            django.core.validators.MinLengthValidator(1),
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            ),
                        ],
                        verbose_name="Слово или фраза",
                    ),
                ),
                (
                    "activity_status",
                    models.CharField(
                        choices=[
                            ("I", "Неактивное"),
                            ("A", "Активное"),
                            ("M", "Усвоенное"),
                        ],
                        default="I",
                        max_length=8,
                        verbose_name="Статус активности",
                    ),
                ),
                (
                    "is_problematic",
                    models.BooleanField(
                        default=False, verbose_name="Проблемно ли для вас это слово"
                    ),
                ),
                (
                    "last_exercise_date",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="Last exercise date"
                    ),
                ),
                (
                    "antonyms",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Слова с обратным значением",
                        through="vocabulary.Antonym",
                        to="vocabulary.word",
                        verbose_name="Антонимы",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор",
                    ),
                ),
            ],
            options={
                "verbose_name": "Слово или фраза",
                "verbose_name_plural": "Слова и фразы",
                "ordering": ("-created", "-modified", "-id"),
                "get_latest_by": ("created", "modified"),
            },
            bases=(core.models.GetObjectBySlugModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="WordTranslation",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Date modified"
                    ),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="Slug")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        help_text="Перевод слова или фразы на другой язык",
                        max_length=512,
                        validators=[
                            django.core.validators.MinLengthValidator(1),
                            django.core.validators.RegexValidator(
                                message="Acceptable characters: Latin letters (A-Z, a-z), Cyrillic letters (А-Я, а-я), Hyphen, Exclamation point, Question mark, Dot, Comma, Colon, Apostrophe. Make sure word begin with a letter.",
                                regex="^([A-Za-zА-Яа-яёЁ]+)([A-Za-zА-Яа-я-!?.,:'()ёЁ ]*)$",
                            ),
                        ],
                        verbose_name="Перевод",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор",
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="word_translations",
                        to="languages.language",
                        verbose_name="Язык",
                    ),
                ),
            ],
            options={
                "verbose_name": "Перевод",
                "verbose_name_plural": "Переводы",
                "ordering": ("-created", "-modified"),
                "get_latest_by": ("created", "modified"),
            },
            bases=(
                core.models.GetObjectBySlugModelMixin,
                vocabulary.models.WordsCountMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="WordUsageExamples",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "example",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="vocabulary.usageexample",
                        verbose_name="Пример использования",
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="vocabulary.word",
                        verbose_name="Слово",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пример использования слова",
                "verbose_name_plural": "Примеры использования слов",
                "ordering": ("-created",),
                "get_latest_by": ("created",),
            },
            bases=(core.models.GetObjectModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="WordTranslations",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "translation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="vocabulary.wordtranslation",
                        verbose_name="Перевод",
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="vocabulary.word",
                        verbose_name="Слово",
                    ),
                ),
            ],
            options={
                "verbose_name": "Перевод слова",
                "verbose_name_plural": "Переводы слов",
                "ordering": ("-created",),
                "get_latest_by": ("created",),
            },
            bases=(core.models.GetObjectModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="WordsInCollections",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "collection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="vocabulary.collection",
                        verbose_name="Коллекция",
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="vocabulary.word",
                        verbose_name="Слово",
                    ),
                ),
            ],
            options={
                "verbose_name": "Слова, добавленные в коллекцию",
                "verbose_name_plural": "Слова, добавленные в коллекцию",
                "ordering": ("-created",),
                "get_latest_by": ("created",),
            },
            bases=(core.models.GetObjectModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="WordsFormGroups",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "forms_group",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s",
                        to="vocabulary.formsgroup",
                        verbose_name="Forms group",
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="vocabulary.word",
                        verbose_name="Слово",
                    ),
                ),
            ],
            options={
                "verbose_name": "Words forms group",
                "verbose_name_plural": "Words forms group",
                "ordering": ("-created",),
                "get_latest_by": ("created",),
            },
        ),
        migrations.CreateModel(
            name="WordQuoteAssociations",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "quote",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="vocabulary.quoteassociation",
                        verbose_name="Quote association",
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="vocabulary.word",
                        verbose_name="Слово",
                    ),
                ),
            ],
            options={
                "verbose_name": "Word quote",
                "verbose_name_plural": "Words quotes",
                "ordering": ("-created",),
                "get_latest_by": ("created",),
            },
            bases=(core.models.GetObjectModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="WordImageAssociations",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="vocabulary.imageassociation",
                        verbose_name="Ассоциация-картинка",
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="vocabulary.word",
                        verbose_name="Слово",
                    ),
                ),
            ],
            options={
                "verbose_name": "Word image",
                "verbose_name_plural": "Words images",
                "ordering": ("-created",),
                "get_latest_by": ("created",),
            },
            bases=(core.models.GetObjectModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="WordDefinitions",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "definition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="vocabulary.definition",
                        verbose_name="Определение",
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="vocabulary.word",
                        verbose_name="Слово",
                    ),
                ),
            ],
            options={
                "verbose_name": "Определение слова",
                "verbose_name_plural": "Определения слов",
                "ordering": ("-created",),
                "get_latest_by": ("created",),
            },
            bases=(core.models.GetObjectModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name="word",
            name="definitions",
            field=models.ManyToManyField(
                blank=True,
                related_name="words",
                through="vocabulary.WordDefinitions",
                to="vocabulary.definition",
                verbose_name="Определения",
            ),
        ),
        migrations.AddField(
            model_name="word",
            name="examples",
            field=models.ManyToManyField(
                blank=True,
                related_name="words",
                through="vocabulary.WordUsageExamples",
                to="vocabulary.usageexample",
                verbose_name="Пример использования",
            ),
        ),
        migrations.AddField(
            model_name="word",
            name="forms",
            field=models.ManyToManyField(
                blank=True,
                help_text="Формы слов",
                through="vocabulary.Form",
                to="vocabulary.word",
                verbose_name="Формы",
            ),
        ),
        migrations.AddField(
            model_name="word",
            name="forms_groups",
            field=models.ManyToManyField(
                blank=True,
                related_name="words",
                through="vocabulary.WordsFormGroups",
                to="vocabulary.formsgroup",
                verbose_name="Word form groups",
            ),
        ),
        migrations.AddField(
            model_name="word",
            name="images_associations",
            field=models.ManyToManyField(
                blank=True,
                related_name="words",
                through="vocabulary.WordImageAssociations",
                to="vocabulary.imageassociation",
                verbose_name="Ассоциация-картинка",
            ),
        ),
        migrations.AddField(
            model_name="word",
            name="language",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="words",
                to="languages.language",
                verbose_name="Язык",
            ),
        ),
        migrations.AddField(
            model_name="word",
            name="quotes_associations",
            field=models.ManyToManyField(
                blank=True,
                related_name="words",
                through="vocabulary.WordQuoteAssociations",
                to="vocabulary.quoteassociation",
                verbose_name="Quote association",
            ),
        ),
        migrations.AddField(
            model_name="word",
            name="similars",
            field=models.ManyToManyField(
                blank=True,
                help_text="Слова с похожим произношением или написанием",
                through="vocabulary.Similar",
                to="vocabulary.word",
                verbose_name="Похожие",
            ),
        ),
        migrations.AddField(
            model_name="word",
            name="synonyms",
            field=models.ManyToManyField(
                blank=True,
                help_text="Слова с похожим значением",
                through="vocabulary.Synonym",
                to="vocabulary.word",
                verbose_name="Синонимы",
            ),
        ),
        migrations.AddField(
            model_name="word",
            name="tags",
            field=models.ManyToManyField(
                blank=True,
                related_name="words",
                to="vocabulary.tag",
                verbose_name="Теги слов",
            ),
        ),
        migrations.AddField(
            model_name="word",
            name="translations",
            field=models.ManyToManyField(
                blank=True,
                related_name="words",
                through="vocabulary.WordTranslations",
                to="vocabulary.wordtranslation",
                verbose_name="Переводы",
            ),
        ),
        migrations.AddField(
            model_name="word",
            name="types",
            field=models.ManyToManyField(
                blank=True,
                related_name="words",
                to="vocabulary.type",
                verbose_name="Тип",
            ),
        ),
        migrations.AddField(
            model_name="synonym",
            name="from_word",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_from_words",
                to="vocabulary.word",
            ),
        ),
        migrations.AddField(
            model_name="synonym",
            name="to_word",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_to_words",
                to="vocabulary.word",
            ),
        ),
        migrations.AddField(
            model_name="similar",
            name="from_word",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_from_words",
                to="vocabulary.word",
            ),
        ),
        migrations.AddField(
            model_name="similar",
            name="to_word",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_to_words",
                to="vocabulary.word",
            ),
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Date modified"
                    ),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="Slug")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "text",
                    models.CharField(max_length=1024, verbose_name="Текст заметки"),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор",
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes",
                        to="vocabulary.word",
                        verbose_name="Слово",
                    ),
                ),
            ],
            options={
                "verbose_name": "Заметка",
                "verbose_name_plural": "Заметки",
                "ordering": ("-created", "-id"),
                "get_latest_by": ("created",),
            },
            bases=(core.models.GetObjectBySlugModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name="form",
            name="from_word",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_from_words",
                to="vocabulary.word",
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="to_word",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_to_words",
                to="vocabulary.word",
            ),
        ),
        migrations.CreateModel(
            name="FavoriteWord",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorite_for",
                        to="vocabulary.word",
                        verbose_name="Слово",
                    ),
                ),
            ],
            options={
                "verbose_name": "Избранное слова",
                "verbose_name_plural": "Избранные слова",
                "ordering": ("-created",),
                "get_latest_by": ("created",),
            },
            bases=(core.models.GetObjectModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="FavoriteCollection",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Date created"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "collection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorite_for",
                        to="vocabulary.collection",
                        verbose_name="Коллекция",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "Избранная коллекция",
                "verbose_name_plural": "Избранные коллекции",
                "ordering": ("-created",),
                "get_latest_by": ("created",),
            },
            bases=(core.models.GetObjectModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name="collection",
            name="words",
            field=models.ManyToManyField(
                blank=True,
                related_name="collections",
                through="vocabulary.WordsInCollections",
                to="vocabulary.word",
                verbose_name="Слово, добавленное в коллекцию",
            ),
        ),
        migrations.AddField(
            model_name="antonym",
            name="from_word",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_from_words",
                to="vocabulary.word",
            ),
        ),
        migrations.AddField(
            model_name="antonym",
            name="to_word",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_to_words",
                to="vocabulary.word",
            ),
        ),
        migrations.AddConstraint(
            model_name="wordusageexamples",
            constraint=models.UniqueConstraint(
                fields=("word", "example"), name="unique_word_example"
            ),
        ),
        migrations.AddConstraint(
            model_name="wordtranslations",
            constraint=models.UniqueConstraint(
                fields=("word", "translation"), name="unique_word_translation"
            ),
        ),
        migrations.AddConstraint(
            model_name="wordtranslation",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("text"),
                models.F("author"),
                name="unique_word_translation_in_user_voc",
            ),
        ),
        migrations.AddConstraint(
            model_name="wordsincollections",
            constraint=models.UniqueConstraint(
                fields=("word", "collection"), name="unique_word_in_collection"
            ),
        ),
        migrations.AddConstraint(
            model_name="wordsformgroups",
            constraint=models.UniqueConstraint(
                fields=("word", "forms_group"), name="unique_word_forms_group"
            ),
        ),
        migrations.AddConstraint(
            model_name="wordquoteassociations",
            constraint=models.UniqueConstraint(
                fields=("word", "quote"), name="unique_word_quote"
            ),
        ),
        migrations.AddConstraint(
            model_name="wordimageassociations",
            constraint=models.UniqueConstraint(
                fields=("word", "image"), name="unique_word_image"
            ),
        ),
        migrations.AddConstraint(
            model_name="worddefinitions",
            constraint=models.UniqueConstraint(
                fields=("word", "definition"), name="unique_word_definition"
            ),
        ),
        migrations.AddConstraint(
            model_name="word",
            constraint=models.UniqueConstraint(
                models.F("text"), models.F("author"), name="unique_words_in_user_voc"
            ),
        ),
        migrations.AddConstraint(
            model_name="usageexample",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("text"),
                models.F("author"),
                name="unique_word_usage_example_in_user_voc",
            ),
        ),
        migrations.AddConstraint(
            model_name="synonym",
            constraint=models.CheckConstraint(
                check=models.Q(("to_word", models.F("from_word")), _negated=True),
                name="synonym_not_same_word",
            ),
        ),
        migrations.AddConstraint(
            model_name="synonym",
            constraint=models.UniqueConstraint(
                fields=("from_word", "to_word"), name="unique_synonyms_pair"
            ),
        ),
        migrations.AddConstraint(
            model_name="similar",
            constraint=models.CheckConstraint(
                check=models.Q(("to_word", models.F("from_word")), _negated=True),
                name="similar_not_same_word",
            ),
        ),
        migrations.AddConstraint(
            model_name="similar",
            constraint=models.UniqueConstraint(
                fields=("from_word", "to_word"), name="unique_similars_pair"
            ),
        ),
        migrations.AddConstraint(
            model_name="formsgroup",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("name"),
                models.F("author"),
                name="unique_group_name",
            ),
        ),
        migrations.AddConstraint(
            model_name="form",
            constraint=models.CheckConstraint(
                check=models.Q(("to_word", models.F("from_word")), _negated=True),
                name="form_not_same_word",
            ),
        ),
        migrations.AddConstraint(
            model_name="form",
            constraint=models.UniqueConstraint(
                fields=("from_word", "to_word"), name="unique_forms_pair"
            ),
        ),
        migrations.AddConstraint(
            model_name="favoriteword",
            constraint=models.UniqueConstraint(
                fields=("word", "user"), name="unique_user_favorite_word"
            ),
        ),
        migrations.AddConstraint(
            model_name="favoritecollection",
            constraint=models.UniqueConstraint(
                fields=("collection", "user"), name="unique_user_favorite_collection"
            ),
        ),
        migrations.AddConstraint(
            model_name="definition",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("text"),
                models.F("author"),
                name="unique_definition_in_user_voc",
            ),
        ),
        migrations.AddConstraint(
            model_name="collection",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("title"),
                models.F("author"),
                name="unique_user_collection",
            ),
        ),
        migrations.AddConstraint(
            model_name="antonym",
            constraint=models.CheckConstraint(
                check=models.Q(("to_word", models.F("from_word")), _negated=True),
                name="antonym_not_same_word",
            ),
        ),
        migrations.AddConstraint(
            model_name="antonym",
            constraint=models.UniqueConstraint(
                fields=("from_word", "to_word"), name="unique_antonyms_pair"
            ),
        ),
    ]
